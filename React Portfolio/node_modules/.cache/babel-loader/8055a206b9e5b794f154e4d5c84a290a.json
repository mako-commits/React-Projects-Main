{"ast":null,"code":"var _jsxFileName = \"/home/mako/Github/My Repo/React_Projects/Stripe Submenu/src/context.js\";\nimport React, { useState, useContext } from 'react';\nimport sublinks from './data'; // global context\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [isSubmenuOpen, setIsSubmenuOpen] = useState(true);\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const openSubmenu = () => {\n    setIsSubmenuOpen(true);\n  };\n\n  const closeSubmenu = () => {\n    setIsSubmenuOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.AppProvider, {\n    value: {\n      isSubmenuOpen,\n      isSidebarOpen,\n      openSubmenu,\n      openSidebar,\n      closeSubmenu,\n      closeSidebar\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider }; // const AppContext = React.createContext();\n// const AppProvider = ({ children }) => {\n//     const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n//     const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\n//     // const [page, setPage] = useState({ page: '', links: [] });\n//     // const [location, setLocation] = useState({});\n//     const openSidebar = () => {\n//         setIsSidebarOpen(true);\n//     };\n//     const closeSidebar = () => {\n//         setIsSidebarOpen(false);\n//     };\n//     const openSubmenu = (text, coordinates) => {\n//         const page = sublinks.find((link) => link.page === text);\n//         setPage(page);\n//         setLocation(coordinates);\n//         setIsSubmenuOpen(true);\n//     };\n//     const closeSubmenu = () => {\n//         setIsSubmenuOpen(false);\n//     };\n//     return (\n//         <AppContext.Provider\n//             value={{\n//                 isSidebarOpen,\n//                 openSidebar,\n//                 closeSidebar,\n//                 isSubmenuOpen,\n//                 openSubmenu,\n//                 closeSubmenu,\n//                 page,\n//                 location,\n//             }}\n//         >\n//             {children}\n//         </AppContext.Provider>\n//     );\n// };\n// // make sure use\n// export const useGlobalContext = () => {\n//     return useContext(AppContext);\n// };\n// export { AppContext, AppProvider };","map":{"version":3,"sources":["/home/mako/Github/My Repo/React_Projects/Stripe Submenu/src/context.js"],"names":["React","useState","useContext","sublinks","AppContext","createContext","AppProvider","children","isSidebarOpen","setIsSidebarOpen","isSubmenuOpen","setIsSubmenuOpen","openSidebar","closeSidebar","openSubmenu","closeSubmenu","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,QAArB,C,CAGA;;AACA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAClC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,IAAD,CAAlD;;AAGA,QAAMW,WAAW,GAAG,MAAM;AACtBH,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GAFD;;AAGA,QAAMI,YAAY,GAAG,MAAM;AACvBJ,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAFD;;AAGA,QAAMK,WAAW,GAAG,MAAM;AACtBH,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GAFD;;AAGA,QAAMI,YAAY,GAAG,MAAM;AACvBJ,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAFD;;AAGA,sBACI,oBAAC,UAAD,CAAY,WAAZ;AAAwB,IAAA,KAAK,EAAE;AAC3BD,MAAAA,aAD2B;AAE3BF,MAAAA,aAF2B;AAG3BM,MAAAA,WAH2B;AAI3BF,MAAAA,WAJ2B;AAK3BG,MAAAA,YAL2B;AAM3BF,MAAAA;AAN2B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKN,QARL,CADJ;AAYH,CA7BD;;AA+BA,OAAO,MAAMS,gBAAgB,GAAG,MAAM;AAClC,SAAOd,UAAU,CAACE,UAAD,CAAjB;AAEH,CAHM;AAKP,SAASA,UAAT,EAAqBE,WAArB,G,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState, useContext } from 'react'\nimport sublinks from './data'\n\n\n// global context\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true)\n    const [isSubmenuOpen, setIsSubmenuOpen] = useState(true)\n\n\n    const openSidebar = () => {\n        setIsSidebarOpen(true)\n    }\n    const closeSidebar = () => {\n        setIsSidebarOpen(false)\n    }\n    const openSubmenu = () => {\n        setIsSubmenuOpen(true)\n    }\n    const closeSubmenu = () => {\n        setIsSubmenuOpen(false)\n    }\n    return (\n        <AppContext.AppProvider value={{\n            isSubmenuOpen,\n            isSidebarOpen,\n            openSubmenu,\n            openSidebar,\n            closeSubmenu,\n            closeSidebar\n        }}>\n            {children}\n        </AppContext.AppProvider>\n    );\n};\n\nexport const useGlobalContext = () => {\n    return useContext(AppContext)\n\n};\n\nexport { AppContext, AppProvider };\n// const AppContext = React.createContext();\n// const AppProvider = ({ children }) => {\n//     const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n//     const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\n//     // const [page, setPage] = useState({ page: '', links: [] });\n//     // const [location, setLocation] = useState({});\n//     const openSidebar = () => {\n//         setIsSidebarOpen(true);\n//     };\n//     const closeSidebar = () => {\n//         setIsSidebarOpen(false);\n//     };\n//     const openSubmenu = (text, coordinates) => {\n//         const page = sublinks.find((link) => link.page === text);\n//         setPage(page);\n//         setLocation(coordinates);\n//         setIsSubmenuOpen(true);\n//     };\n//     const closeSubmenu = () => {\n//         setIsSubmenuOpen(false);\n//     };\n\n//     return (\n//         <AppContext.Provider\n//             value={{\n//                 isSidebarOpen,\n//                 openSidebar,\n//                 closeSidebar,\n//                 isSubmenuOpen,\n//                 openSubmenu,\n//                 closeSubmenu,\n//                 page,\n//                 location,\n//             }}\n//         >\n//             {children}\n//         </AppContext.Provider>\n//     );\n// };\n// // make sure use\n// export const useGlobalContext = () => {\n//     return useContext(AppContext);\n// };\n\n// export { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}