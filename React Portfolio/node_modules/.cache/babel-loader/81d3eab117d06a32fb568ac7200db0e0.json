{"ast":null,"code":"var _jsxFileName = \"/home/mako/Github/My Repo/React_Projects/Sidebar and Modal Component/src/context.js\";\nimport React, { useState, useContext } from 'react';\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      isModalOpen,\n      isSidebarOpen,\n      openModal,\n      closeModal,\n      openSidebar,\n      closeSidebar\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, children);\n}; // custom hook\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/home/mako/Github/My Repo/React_Projects/Sidebar and Modal Component/src/context.js"],"names":["React","useState","useContext","AppContext","createContext","AppProvider","children","isSidebarOpen","setIsSidebarOpen","isModalOpen","setIsModalOpen","openSidebar","closeSidebar","openModal","closeModal","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAGA,MAAMC,UAAU,GAAGH,KAAK,CAACI,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAClC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMU,WAAW,GAAG,MAAM;AACtBH,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GAFD;;AAGA,QAAMI,YAAY,GAAG,MAAM;AACvBJ,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAFD;;AAGA,QAAMK,SAAS,GAAG,MAAM;AACpBH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAFD;;AAGA,QAAMI,UAAU,GAAG,MAAM;AACrBJ,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAFD;;AAIA,sBACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAED,MAAAA,WAAF;AAAeF,MAAAA,aAAf;AAA8BM,MAAAA,SAA9B;AAAyCC,MAAAA,UAAzC;AAAqDH,MAAAA,WAArD;AAAkEC,MAAAA;AAAlE,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+GN,QAA/G,CADJ;AAGH,CApBD,C,CAqBA;;;AACA,OAAO,MAAMS,gBAAgB,GAAG,MAAM;AAClC,SAAOb,UAAU,CAACC,UAAD,CAAjB;AACH,CAFM;AAGP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext } from 'react'\n\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n    const [isModalOpen, setIsModalOpen] = useState(false)\n\n    const openSidebar = () => {\n        setIsSidebarOpen(true)\n    }\n    const closeSidebar = () => {\n        setIsSidebarOpen(false)\n    }\n    const openModal = () => {\n        setIsModalOpen(true)\n    }\n    const closeModal = () => {\n        setIsModalOpen(false)\n    }\n\n    return (\n        <AppContext.Provider value={{ isModalOpen, isSidebarOpen, openModal, closeModal, openSidebar, closeSidebar }}>{children}</AppContext.Provider>\n    )\n}\n// custom hook\nexport const useGlobalContext = () => {\n    return useContext(AppContext)\n}\nexport { AppContext, AppProvider }"]},"metadata":{},"sourceType":"module"}