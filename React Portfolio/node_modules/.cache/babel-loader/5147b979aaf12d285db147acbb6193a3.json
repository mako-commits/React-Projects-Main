{"ast":null,"code":"var _jsxFileName = \"/home/mako/Github/My Repo/React_Projects/Stripe Submenu/src/context.js\";\nimport React, { useState, useContext } from 'react';\nimport sublinks from './data'; // global context\n// const AppContext = React.createContext();\n// const AppProvider = ({ children }) => {\n//     const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n//     const [isSubmenuOpen, setIsSubmenuOpen] = useState(false)\n//     const [location, setLocation] = useState({})\n//     const openSidebar = () => {\n//         setIsSidebarOpen(true)\n//     };\n//     const closeSidebar = () => {\n//         setIsSidebarOpen(false)\n//     };\n//     const openSubmenu = (text, coordinates) => {\n//         setLocation(coordinates)\n//         setIsSubmenuOpen(true)\n//     };\n//     const closeSubmenu = () => {\n//         setIsSubmenuOpen(false)\n//     };\n//     return (\n//         <AppContext.Provider\n//             value={{\n//                 isSidebarOpen,\n//                 openSidebar,\n//                 closeSidebar,\n//                 isSubmenuOpen,\n//                 openSubmenu,\n//                 closeSubmenu,\n//                 location,\n//             }}\n//         >\n//             {children}\n//         </AppContext.Provider>\n//     );\n// };\n// export const useGlobalContext = () => {\n//     return useContext(AppContext)\n// };\n// export { AppContext, AppProvider };\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSubmenuOpen, setIsSubmenuOpen] = useState(false); // const [page, setPage] = useState({ page: '', links: [] });\n  // const [location, setLocation] = useState({});\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const openSubmenu = (text, coordinates) => {\n    const page = sublinks.find(link => link.page === text); // setPage(page);\n\n    setLocation(coordinates);\n    setIsSubmenuOpen(true);\n  };\n\n  const closeSubmenu = () => {\n    setIsSubmenuOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      isSidebarOpen,\n      openSidebar,\n      closeSidebar,\n      isSubmenuOpen,\n      openSubmenu,\n      closeSubmenu,\n      // page,\n      location\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/home/mako/Github/My Repo/React_Projects/Stripe Submenu/src/context.js"],"names":["React","useState","useContext","sublinks","AppContext","createContext","AppProvider","children","isSidebarOpen","setIsSidebarOpen","isSubmenuOpen","setIsSubmenuOpen","openSidebar","closeSidebar","openSubmenu","text","coordinates","page","find","link","setLocation","closeSubmenu","location","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,QAArB,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;AAMA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAClC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD,CAFkC,CAGlC;AACA;;AACA,QAAMW,WAAW,GAAG,MAAM;AACtBH,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GAFD;;AAGA,QAAMI,YAAY,GAAG,MAAM;AACvBJ,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAFD;;AAGA,QAAMK,WAAW,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAuB;AACvC,UAAMC,IAAI,GAAGd,QAAQ,CAACe,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACF,IAAL,KAAcF,IAAtC,CAAb,CADuC,CAEvC;;AACAK,IAAAA,WAAW,CAACJ,WAAD,CAAX;AACAL,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GALD;;AAMA,QAAMU,YAAY,GAAG,MAAM;AACvBV,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAFD;;AAIA,sBACI,oBAAC,UAAD,CAAY,QAAZ;AACI,IAAA,KAAK,EAAE;AACHH,MAAAA,aADG;AAEHI,MAAAA,WAFG;AAGHC,MAAAA,YAHG;AAIHH,MAAAA,aAJG;AAKHI,MAAAA,WALG;AAMHO,MAAAA,YANG;AAOH;AACAC,MAAAA;AARG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYKf,QAZL,CADJ;AAgBH,CArCD,C,CAsCA;;;AACA,OAAO,MAAMgB,gBAAgB,GAAG,MAAM;AAClC,SAAOrB,UAAU,CAACE,UAAD,CAAjB;AACH,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext } from 'react'\nimport sublinks from './data'\n\n\n// global context\n// const AppContext = React.createContext();\n\n// const AppProvider = ({ children }) => {\n//     const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n//     const [isSubmenuOpen, setIsSubmenuOpen] = useState(false)\n//     const [location, setLocation] = useState({})\n\n//     const openSidebar = () => {\n//         setIsSidebarOpen(true)\n//     };\n//     const closeSidebar = () => {\n//         setIsSidebarOpen(false)\n//     };\n//     const openSubmenu = (text, coordinates) => {\n//         setLocation(coordinates)\n//         setIsSubmenuOpen(true)\n//     };\n//     const closeSubmenu = () => {\n//         setIsSubmenuOpen(false)\n//     };\n//     return (\n//         <AppContext.Provider\n//             value={{\n//                 isSidebarOpen,\n//                 openSidebar,\n//                 closeSidebar,\n//                 isSubmenuOpen,\n//                 openSubmenu,\n//                 closeSubmenu,\n//                 location,\n\n//             }}\n//         >\n//             {children}\n//         </AppContext.Provider>\n//     );\n// };\n\n// export const useGlobalContext = () => {\n//     return useContext(AppContext)\n\n// };\n\n// export { AppContext, AppProvider };\n\n\n\n\n\nconst AppContext = React.createContext();\nconst AppProvider = ({ children }) => {\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n    const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\n    // const [page, setPage] = useState({ page: '', links: [] });\n    // const [location, setLocation] = useState({});\n    const openSidebar = () => {\n        setIsSidebarOpen(true);\n    };\n    const closeSidebar = () => {\n        setIsSidebarOpen(false);\n    };\n    const openSubmenu = (text, coordinates) => {\n        const page = sublinks.find((link) => link.page === text);\n        // setPage(page);\n        setLocation(coordinates);\n        setIsSubmenuOpen(true);\n    };\n    const closeSubmenu = () => {\n        setIsSubmenuOpen(false);\n    };\n\n    return (\n        <AppContext.Provider\n            value={{\n                isSidebarOpen,\n                openSidebar,\n                closeSidebar,\n                isSubmenuOpen,\n                openSubmenu,\n                closeSubmenu,\n                // page,\n                location,\n            }}\n        >\n            {children}\n        </AppContext.Provider>\n    );\n};\n// make sure use\nexport const useGlobalContext = () => {\n    return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}